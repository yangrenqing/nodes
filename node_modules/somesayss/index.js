var url = require('url');

//统一日志
exports.log = function(arg){
	console.log('MES: '+arg)
}

//自定义对象方法
exports.somObject = {
	log: function(obj){
		for(var i in obj){
			console.log('[ '+i+' : '+obj[i]+' ]')
		}
	}
}

//自定义的try
var somTry = exports.somTry = function(){
	for(var i=0,j=arguments.length;i<j;++i){
		try{
			return arguments[i]();
		}catch(e){}
	}
}

//睡眠
exports.sleep = function(seconds){
	var starTime = new Date().getTime();
	while(new Date().getTime() < starTime + seconds);
}

//typeof
exports.Typeof = function(key){
	switch(Object.prototype.toString.call(key)){
	case '[object Array]' 		: return 'Array';
	case '[object String]' 		: return 'String';
	case '[object RegExp]' 		: return 'RegExp';
	case '[object Number]' 		: return 'Number';
	case '[object Function]'	: return 'Function';
	case '[object Boolean]' 	: return 'Boolean';
	default :
		switch(key){
			case null 			: return 'Null';
			case undefined 		: return 'Undefined';
			default 			: return 'Object';
		}
	}
}

exports.Array = function(obj){
	return somTry(
		function(){
			return [].slice.call(obj,0);
		},
		function(){
			var arr = [], i = 0, j = obj.length;
			for(; i < j; ++i)
				arr[i] = obj[i];
			return arr;
		},
		function(){
			return [].concat(obj);
		}
	)
};
exports.Index = function(obj, objs){ //不用while循环的原因是数组中也许存在 0,false, 这种值!!!逆遍历的原因是可以少一个变量
	for(var i=objs.length-1; 0<=i; --i){
		if(obj === objs[i]) 
			return i;
	}
	return -1;
};
exports.Each = function(obj, fn, is){ //不用while循环的原因是数组中也许存在 0,false, 这种值!!!为什么不逆着遍历 ? 由于Array的unique除重,如果逆着来返回的Array顺序会有偏差
	var i = 0, j = obj.length, z, temp;
	if(!is){
		for(; i < j; ++i)
			if(fn.call(obj[i], i, obj) === false)
				break;
	}else{
		for(z in obj)
			if(fn.call(obj[z], z, obj) === false)
				break;
	}
};


//模板解析
exports.templateJs = require('./templateJs').templateJs;

//cookie
exports.cookie = require('./cookie').cookie;

//hasMap
exports.hashMap = require('./hasMap').hashMap;

//mysql
exports.mysql   = require('./mysql').mysql;