/**
 * @fileoverview hashMap
 */
var hashMap = function(){
	return this instanceof hashMap ? this.init() : new hashMap();
}
hashMap.prototype = {
	init:function(){
		this.arr = [];
		this.cache = {};
	},
	size: function(){
		return this.arr.length;
	},
	put: function(name, val){
		var self = this, arr = self.arr, cache = self.cache;
		//存入数组
		cache.hasOwnProperty(name) || (arr[arr.length] = name);
		//存入数据
		cache[name] = val;
		return self;
	},
	get: function(name){
		return this.cache[name];
	},
	remove: function(name){
		var self = this, arr = self.arr, cache = self.cache;
		//删除数组中的元素
		self.tool.remove(arr, name);
		//伤处缓存中的元素
		delete cache[name];
		return self;
	},
	each: function(fn){
		var self = this, arr = self.arr, cache = self.cache, i = 0, j = arr.length;
		for(; i < j; ++i){
			if(fn.call(cache[arr[i]], arr[i], i, cache) === false)
				break;
		}
	},
	toString: function(){
		try{
			return JSON.stringify(this.cache);
		}catch(e){
			return this.tool.jsonToString(this.cache, this.arr);
		}
	},
	valueOf: function(){
		return this.cache;
	},
	isEmpty: function(){
		return this.arr.length === 0;
	},
	tool: {
		remove: function(arr, name){
			var i = 0, j = arr.length;
			for(; i < j; ++i){
				if(arr[i] === name){
					arr.splice(i, 1);
					break;
				}
			}
			return arr;
		},
		jsonToString: function(json, arr){
			var i = 0, j = arr.length, val = '{';
			for(; i < j; ++i){
				val += '"';
				val += arr[i];
				val += '":"';
				val += json[arr[i]];
				val += '",';
			}
			val += '}'
			val = val.replace(',}', '}');
			return val;
		}
	}
}
exports.hashMap = hashMap;